# -*- coding: utf-8 -*-
"""Task_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1874Y5ujsxc-fdqN0YmyroJicZ9r47i31
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
plt.style.use('dark_background')

df=pd.read_csv('/content/zomato.csv')
df.head()

df.shape

df.columns

df=df.drop(['address','phone','rest_type','dish_liked'],axis=1,errors='ignore')
df.head()

df.info()

df.drop_duplicates(inplace=True)
df.shape

df['rate'].unique()

def handlerate(value):
    value_str = str(value)
    if value_str in [" but we weren't blown away. It was", " also a slightly larger portion size wud be much appreciated...\\n\\nService - 5/10\\n\\nReally needs a lot of tweak up... the waiters are never to be found on the floor... they lack knowledge of dishes... very uninviting overall...\\n\\nOverall not a grt experience :(')", " small place "] or value_str == 'nan':
        return np.nan
    else:
        if '/' in value_str:
            try:
                value_split = value_str.split('/')
                return float(value_split[0])
            except ValueError:
                return np.nan
        else:
            try:
                return float(value_str)
            except ValueError:
                return np.nan

df['rate'] = df['rate'].apply(handlerate)
df['rate'].head()

df.rate.isnull().sum()

df['rate'].fillna(df['rate'].mean(),inplace=True)
df['rate'].isnull().sum()

df.info()

df.dropna(inplace=True)
df.head()

df.rename(columns = {'approx_cost(for two people)': 'Cost2plates', 'listed_in(type)':'Type'}, inplace=True)
df.head()

def handlecomma(value):
       value = str(value)
       if ',' in value:
            value = value.replace(',', '')
       try:
            return float(value)
       except ValueError:
            return np.nan

df['Cost2plates']=df['Cost2plates'].apply(handlecomma)
df['Cost2plates'].unique()

df.Cost2plates.isnull().sum()

df['Cost2plates'].fillna(df['Cost2plates'].mean(),inplace=True)
df['Cost2plates'].isnull().sum()

df.head()

df['location'].value_counts()

location = df['location'].value_counts (ascending = False)
location_lessthan300 = location [location<300]

def handle_location (value):
     if (value in location_lessthan300):
        return 'others'
     else:
        return value
df['location'] = df['location'].apply(handle_location)
df['location'].value_counts()

cuisines=df['cuisines'].value_counts(ascending = False)
cuisines_lessthan100 = cuisines[cuisines<100]

def handle_cuisines (value):
          if (value in cuisines_lessthan100):
             return 'others'
          else:
             return value
df['cuisines'] = df['cuisines'].apply(handle_cuisines)
df['cuisines'].value_counts()

df.head()

df['Type'].value_counts()

Type=df['Type'].value_counts(ascending = False)
Type_lessthan100 = Type[Type<100]

def handle_Type (value):
          if (value in Type_lessthan100):
             return 'others'
          else:
             return value
df['Type'] = df['Type'].apply(handle_Type)
df['Type'].value_counts()

df['online_order'].value_counts()

def handle_online_order(value):
          if value in ['Yes', 'No']:
             return value
          else:
             return 'others'

df['online_order'] = df['online_order'].apply(handle_online_order)
df['online_order'].value_counts()

df = df[df['online_order'] != 'others']

custom_colors = ['#FF9999', '#66B2FF', '#99FF99', '#FFCC59', '#B266FF']
plt.figure(figsize=(16,10))
ax = sns.countplot(x=df['location'], palette=custom_colors)
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x=df['online_order'], palette='inferno')

df.head()

df['book_table'].value_counts()

plt.figure(figsize=(6,6))
sns.countplot(x=df['book_table'], palette='rainbow')

plt.figure(figsize=(6,6))
sns.boxplot(x='online_order', y='rate', data=df)

plt.figure(figsize=(6,6))
sns.boxplot(x='book_table', y='rate', data=df, palette='inferno')

df1 =df.groupby(['location', 'online_order'])['name'].count()
df1.to_csv('location_online.csv')
df1 = pd.read_csv('location_online.csv')
df1 = pd.pivot_table(df1, values=None, index=['location'], columns=['online_order'], fill_value=0, aggfunc=np.sum)
df1

df1.plot(kind='bar',figsize=(15,8))

df2 =df.groupby(['location', 'book_table'])['name'].count()
df2.to_csv('location__booktable.csv')
df2 = pd.read_csv('location__booktable.csv')
df2 = pd.pivot_table(df2, values=None, index=['location'], columns=['book_table'], fill_value=0, aggfunc=np.sum)
df2

df2.plot(kind='bar',figsize=(15,8))

plt.figure(figsize=(14, 8))
sns.boxplot(x = 'Type', y = 'rate', data = df, palette = 'inferno')

df3= df.groupby(['location', 'Type'])['name'].count()
df3.to_csv('location_Type.csv')
df3 = pd.read_csv('location_Type.csv')
df3 = pd.pivot_table(df3, values=None, index=['location'], columns=['Type'], fill_value=0, aggfunc=np.sum)
df3

df3.plot(kind='bar',figsize=(20,8))