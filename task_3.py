# -*- coding: utf-8 -*-
"""Task_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zOk6R8tzivp4kD9Ws9C63dxh_YSpK5bW
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df=pd.read_csv('/content/loan_prediction.csv')

df.head()

df.shape

df.info()

df.isnull().sum()

df.duplicated().sum()

df.nunique()

df.describe(include = 'all')

numeric_features = [feature for feature in df.columns if df[feature].dtype != 'O']
categorical_features = [feature for feature in df.columns if df[feature].dtype == 'O']

print('We have {} numerical features : {}'.format(len(numeric_features), numeric_features))
print('\nWe have {} categorical features : {}'.format(len(categorical_features), categorical_features))

df.columns

def delete_space(df):
    df.columns = df.columns.str.lstrip()
    return df

df = delete_space(df)
df.columns

df.rename(columns = {'cibil_score':'credit_score'},inplace =True)

df.head()

print("Categories in 'Loan_Status' variable:     ",end=" " )
print(df['Loan_Status'].unique())

print("Categories in 'self_Employed' variable:     ",end=" " )
print(df['Self_Employed'].unique())

print("Categories in 'Education' variable:     ",end=" " )
print(df['Education'].unique())

df['Loan_Status'].value_counts(normalize = True)

numeric_df = df[numeric_features]
cor = numeric_df.corr()
cor

corr = numeric_df.corr()

plt.figure(figsize=(10,10))
sns.heatmap(corr, vmin= -1, center=0, vmax = 1, annot=True)
plt.show()

sns.countplot(x='Loan_Status', data= df)

sns.countplot(x='Self_Employed', data= df)

sns.countplot(x='Loan_Amount_Term', data= df)

plt.hist(df['LoanAmount'], bins=10,edgecolor='black')
plt.title('LoanAmount')
plt.show()

sns.boxplot(x='Loan_Status', y='Dependents', data=df)
plt.title('Dependents vs Loan Status')
plt.show()

sns.scatterplot(x='ApplicantIncome', y='LoanAmount', hue='Loan_Status', data=df)
plt.title('ApplicantIncome vs Loan Amount')
plt.show()